plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'
}

group = 'com.example.plazoleta'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {


	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'javax.servlet:javax.servlet-api:4.0.1'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.postgresql:postgresql:42.6.0'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.h2database:h2'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	implementation 'org.apache.httpcomponents.client5:httpclient5:5.2.1'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2:2.2.224'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:2023.0.1"
	}
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
	systemProperty 'file.encoding', 'UTF-8' // Forzar UTF-8 durante los tests
	testLogging {
		events "passed", "skipped", "failed"
		exceptionFormat "full"
		showStandardStreams = true
	}
}

jacoco {
	toolVersion = '0.8.12'
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'com/example/plazoleta/**/*Application*'
			])
		}))
	}
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8' // Forzar UTF-8 en compilaci√≥n
	options.annotationProcessorPath = configurations.annotationProcessor
}

tasks.named('build') {
	dependsOn jacocoTestCoverageVerification
}
